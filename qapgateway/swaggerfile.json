{
  "info": {
    "title": "1Password Connect",
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_upload.wikimedia.org_wikipedia_commons_thumb_e_e3_1password-logo.svg_1280px-1password-logo.svg.png"
    },
    "contact": {
      "url": "https://support.1password.com/",
      "name": "1Password Integrations",
      "email": "support@1password.com"
    },
    "version": "1.5.7",
    "x-origin": [
      {
        "url": "https://i.1password.com/media/1password-connect/1password-connect-api.yaml",
        "format": "openapi",
        "version": "3.0"
      }
    ],
    "description": "REST API interface for 1Password Connect.",
    "x-serviceName": "connect",
    "x-providerName": "1password.local",
    "x-apisguru-categories": [
      "security"
    ]
  },
  "tags": [
    {
      "name": "Items",
      "description": "Access and manage items inside 1Password Vaults"
    },
    {
      "name": "Vaults",
      "description": "Access 1Password Vaults"
    },
    {
      "name": "Activity",
      "description": "Access API Request Activity"
    }
  ],
  "paths": {
    "1password-connect/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "servers": [
          {
            "url": "http://localhost:8080"
          }
        ],
        "summary": "Get state of the server and its dependencies.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "version"
                  ],
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string",
                      "description": "The Connect server's version"
                    },
                    "dependencies": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ServiceDependency"
                      }
                    }
                  }
                },
                "examples": {
                  "WaitingForAPIRequest": {
                    "value": {
                      "name": "1Password Connect API",
                      "version": "1.2.1",
                      "dependencies": [
                        {
                          "status": "TOKEN_NEEDED",
                          "service": "sync"
                        },
                        {
                          "status": "ACTIVE",
                          "message": "Connected to./1password.sqlite",
                          "service": "sqlite"
                        }
                      ]
                    },
                    "summary": "API server waiting for first authenticated request"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "parameters": [],
        "operationId": "GetServerHealth"
      }
    },
    "1password-connect/vaults": {
      "get": {
        "tags": [
          "Vaults"
        ],
        "summary": "Get all Vaults",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Vault"
                  }
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 401,
                  "message": "Invalid token signature"
                }
              }
            },
            "description": "Invalid or missing token"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string",
              "example": "name eq \"Some Vault Name\""
            },
            "description": "Filter the Vault collection based on Vault name using SCIM eq filter"
          }
        ],
        "operationId": "GetVaults"
      }
    },
    "1password-connect/metrics": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "servers": [
          {
            "url": "http://localhost:8080"
          }
        ],
        "summary": "Query server for exposed Prometheus metrics",
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "# HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.\n# TYPE go_gc_duration_seconds summary\ngo_gc_duration_seconds{quantile=\"0\"} 2.9153e-05\ngo_gc_duration_seconds{quantile=\"0.25\"} 6.2832e-05\ngo_gc_duration_seconds{quantile=\"0.5\"} 9.7187e-05\ngo_gc_duration_seconds{quantile=\"0.75\"} 0.000112967\ngo_gc_duration_seconds{quantile=\"1\"} 0.000215819\ngo_gc_duration_seconds_sum 0.001376862\ngo_gc_duration_seconds_count 14\n"
                }
              }
            },
            "description": "Successfully returned Prometheus metrics"
          }
        },
        "parameters": [],
        "description": "See Prometheus documentation for a complete data model.",
        "operationId": "GetPrometheusMetrics"
      }
    },
    "1password-connect/activity": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Retrieve a list of API Requests that have been made.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/APIRequest"
                  }
                }
              }
            },
            "headers": {
              "Content-Range": {
                "schema": {
                  "type": "string",
                  "example": "1-50/1134"
                },
                "description": "An decription of what part of the collection has been returned as well as the total size."
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 401,
                  "message": "Invalid token signature"
                }
              }
            },
            "description": "Invalid or missing token"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 50,
              "example": 10
            },
            "description": "How many API Events should be retrieved in a single request."
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "default": 0,
              "example": 50
            },
            "description": "How far into the collection of API Events should the response start"
          }
        ],
        "operationId": "GetApiActivity"
      }
    },
    "1password-connect/heartbeat": {
      "get": {
        "tags": [
          "Health"
        ],
        "servers": [
          {
            "url": "http://localhost:8080"
          }
        ],
        "summary": "Ping the server for liveness",
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "."
                }
              }
            },
            "description": "OK"
          }
        },
        "parameters": [],
        "operationId": "GetHeartbeat"
      }
    },
    "1password-connect/vaults/{vaultUuid}": {
      "get": {
        "tags": [
          "Vaults"
        ],
        "summary": "Get Vault details and metadata",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 401,
                  "message": "Invalid token signature"
                }
              }
            },
            "description": "Invalid or missing token"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 403,
                  "message": "vault {vaultUuid} is not in scope"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 404,
                  "message": "vault {itemUuid} not found"
                }
              }
            },
            "description": "Vault not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "vaultUuid",
            "schema": {
              "type": "string",
              "pattern": "^[\\da-z]{26}$"
            },
            "required": true,
            "description": "The UUID of the Vault to fetch Items from"
          }
        ],
        "operationId": "GetVaultById"
      }
    },
    "1password-connect/vaults/{vaultUuid}/items": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get all items for inside a Vault",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 401,
                  "message": "Invalid token signature"
                }
              }
            },
            "description": "Invalid or missing token"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 404,
                  "message": "vault {vaultUuid} not found"
                }
              }
            },
            "description": "Vault not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "vaultUuid",
            "schema": {
              "type": "string",
              "pattern": "^[\\da-z]{26}$"
            },
            "required": true,
            "description": "The UUID of the Vault to fetch Items from"
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string",
              "example": "title eq \"Some Item Name\""
            },
            "description": "Filter the Item collection based on Item name using SCIM eq filter"
          }
        ],
        "operationId": "GetVaultItems"
      },
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Create a new Item",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullItem"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid item category"
                }
              }
            },
            "description": "Unable to create item due to invalid input"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 401,
                  "message": "Invalid token signature"
                }
              }
            },
            "description": "Invalid or missing token"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 403,
                  "message": "vault {vaultUuid} is not in scope"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "vaultNotFound": {
                    "value": {
                      "status": 404,
                      "message": "vault {vaultUuid} not found"
                    },
                    "summary": "Vault not found"
                  }
                }
              }
            },
            "description": "Item not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "vaultUuid",
            "schema": {
              "type": "string",
              "pattern": "^[\\da-z]{26}$"
            },
            "required": true,
            "description": "The UUID of the Vault to create an Item in"
          }
        ],
        "operationId": "CreateVaultItem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FullItem"
              }
            }
          }
        }
      }
    },
    "1password-connect/vaults/{vaultUuid}/items/{itemUuid}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get the details of an Item",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullItem"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 401,
                  "message": "Invalid token signature"
                }
              }
            },
            "description": "Invalid or missing token"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 403,
                  "message": "vault {vaultUuid} is not in scope"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "itemNotFound": {
                    "value": {
                      "status": 404,
                      "message": "item {itemUuid} not found"
                    },
                    "summary": "Item not found"
                  },
                  "vaultNotFound": {
                    "value": {
                      "status": 404,
                      "message": "vault {vaultUuid} not found"
                    },
                    "summary": "Vault not found"
                  }
                }
              }
            },
            "description": "Item not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "vaultUuid",
            "schema": {
              "type": "string",
              "pattern": "^[\\da-z]{26}$"
            },
            "required": true,
            "description": "The UUID of the Vault to fetch Item from"
          },
          {
            "in": "path",
            "name": "itemUuid",
            "schema": {
              "type": "string",
              "pattern": "^[\\da-z]{26}$"
            },
            "required": true,
            "description": "The UUID of the Item to fetch"
          }
        ],
        "operationId": "GetVaultItemById"
      },
      "put": {
        "tags": [
          "Items"
        ],
        "summary": "Update an Item",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullItem"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 400,
                  "message": "The item doesn't have a {example field name} field."
                }
              }
            },
            "description": "Unable to create item due to invalid input"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 401,
                  "message": "Invalid token signature"
                }
              }
            },
            "description": "Invalid or missing token"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 403,
                  "message": "vault {vaultUuid} is not in scope"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "itemNotFound": {
                    "value": {
                      "status": 404,
                      "message": "item {itemUuid} not found"
                    },
                    "summary": "Item not found"
                  },
                  "vaultNotFound": {
                    "value": {
                      "status": 404,
                      "message": "vault {vaultUuid} not found"
                    },
                    "summary": "Vault not found"
                  }
                }
              }
            },
            "description": "Item not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "vaultUuid",
            "schema": {
              "type": "string",
              "pattern": "^[\\da-z]{26}$"
            },
            "required": true,
            "description": "The UUID of the Item's Vault"
          },
          {
            "in": "path",
            "name": "itemUuid",
            "schema": {
              "type": "string",
              "pattern": "^[\\da-z]{26}$"
            },
            "required": true,
            "description": "The UUID of the Item to update"
          }
        ],
        "operationId": "UpdateVaultItem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FullItem"
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Items"
        ],
        "summary": "Update a subset of Item attributes",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullItem"
                }
              }
            },
            "description": "OK - Item updated. If no Patch operations were provided, Item is unmodified."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 401,
                  "message": "Invalid token signature"
                }
              }
            },
            "description": "Invalid or missing token"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 403,
                  "message": "vault {vaultUuid} is not in scope"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "itemNotFound": {
                    "value": {
                      "status": 404,
                      "message": "item {itemUuid} not found"
                    },
                    "summary": "Item not found"
                  },
                  "vaultNotFound": {
                    "value": {
                      "status": 404,
                      "message": "vault {vaultUuid} not found"
                    },
                    "summary": "Vault not found"
                  }
                }
              }
            },
            "description": "Item not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "vaultUuid",
            "schema": {
              "type": "string",
              "pattern": "^[\\da-z]{26}$"
            },
            "required": true,
            "description": "The UUID of the Vault the item is in"
          },
          {
            "in": "path",
            "name": "itemUuid",
            "schema": {
              "type": "string",
              "pattern": "^[\\da-z]{26}$"
            },
            "required": true,
            "description": "The UUID of the Item to update"
          }
        ],
        "description": "Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports `add`, `remove` and `replace` operations.\n\nWhen modifying a specific ItemField, the ItemField's ID in the `path` attribute of the operation object: `/fields/{fieldId}`\n",
        "operationId": "PatchVaultItem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patch"
              },
              "examples": {
                "PatchItemAttr": {
                  "value": [
                    {
                      "op": "replace",
                      "path": "/favorite",
                      "value": true
                    },
                    {
                      "op": "remove",
                      "path": "/tags/1"
                    }
                  ],
                  "summary": "Update specific Item attributes"
                },
                "PatchItemField": {
                  "value": [
                    {
                      "op": "add",
                      "path": "/fields",
                      "value": {
                        "type": "string",
                        "label": "New Field",
                        "value": "hunter2"
                      }
                    }
                  ],
                  "summary": "Add a new ItemField to the Item"
                },
                "PatchItemFieldAttr": {
                  "value": [
                    {
                      "op": "add",
                      "path": "/fields/s2ju540zlna8bdj4uro7sj64rk/label",
                      "value": "New field name"
                    },
                    {
                      "op": "remove",
                      "path": "/fields/s2ju540zlna8bdj4uro7sj64rk/value"
                    }
                  ],
                  "summary": "Modify a specific ItemField attribute."
                },
                "PatchItemFieldWithID": {
                  "value": [
                    {
                      "op": "replace",
                      "path": "/fields/r9qxq7xnhfhukoxsc8ymqr0y11",
                      "value": {
                        "type": "string",
                        "label": "Replacement Title",
                        "value": "new value"
                      }
                    },
                    {
                      "op": "remove",
                      "path": "/fields/h2nl155dshi043yse7wa3u1hs7"
                    }
                  ],
                  "summary": "Modify or remove an ItemField."
                },
                "ReplaceAllAttributes": {
                  "value": [
                    {
                      "op": "replace",
                      "path": "/",
                      "value": {
                        "...": "Any attr from FullItem schema",
                        "tags": [
                          "tag1",
                          "tag2"
                        ],
                        "title": "New Title",
                        "favorite": true
                      }
                    }
                  ],
                  "summary": "Replace an entire Item with new fields. Equivalent to a PUT request."
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "summary": "Delete an Item",
        "responses": {
          "204": {
            "description": "Successfully deleted an item"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 401,
                  "message": "Invalid token signature"
                }
              }
            },
            "description": "Invalid or missing token"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 403,
                  "message": "vault {vaultUuid} is not in scope"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "vaultNotFound": {
                    "value": {
                      "status": 404,
                      "message": "vault {vaultUuid} not found"
                    },
                    "summary": "Vault not found"
                  }
                }
              }
            },
            "description": "Item not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "vaultUuid",
            "schema": {
              "type": "string",
              "pattern": "^[\\da-z]{26}$"
            },
            "required": true,
            "description": "The UUID of the Vault the item is in"
          },
          {
            "in": "path",
            "name": "itemUuid",
            "schema": {
              "type": "string",
              "pattern": "^[\\da-z]{26}$"
            },
            "required": true,
            "description": "The UUID of the Item to update"
          }
        ],
        "operationId": "DeleteVaultItem"
      }
    },
    "1password-connect/vaults/{vaultUuid}/items/{itemUuid}/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get all the files inside an Item",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 401,
                  "message": "Invalid token signature"
                }
              }
            },
            "description": "Invalid or missing token"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "itemNotFound": {
                    "value": {
                      "status": 404,
                      "message": "item {itemUuid} not found"
                    },
                    "summary": "Item not found"
                  },
                  "vaultNotFound": {
                    "value": {
                      "status": 404,
                      "message": "vault {vaultUuid} not found"
                    },
                    "summary": "Vault not found"
                  }
                }
              }
            },
            "description": "Item not found"
          },
          "413": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "fileTooLarge": {
                    "value": {
                      "status": 413,
                      "message": "File is too large to inline in request. Use the /v1/vaults/{vaultUUID}/items/{itemUUID}/files/{fileUUID}/content endpoint instead."
                    },
                    "summary": "File too large"
                  }
                }
              }
            },
            "description": "File content too large to display"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "vaultUuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The UUID of the Vault to fetch Items from"
          },
          {
            "in": "path",
            "name": "itemUuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The UUID of the Item to fetch files from"
          },
          {
            "in": "query",
            "name": "inline_files",
            "schema": {
              "type": "boolean",
              "example": true
            },
            "description": "Tells server to return the base64-encoded file contents in the response."
          }
        ],
        "operationId": "GetItemFiles"
      }
    },
    "1password-connect/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get the details of a File",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 401,
                  "message": "Invalid token signature"
                }
              }
            },
            "description": "Invalid or missing token"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 403,
                  "message": "vault {vaultUuid} is not in scope"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "fileNotFound": {
                    "value": {
                      "status": 404,
                      "message": "file {fileUuid} not found"
                    },
                    "summary": "File not found"
                  },
                  "itemNotFound": {
                    "value": {
                      "status": 404,
                      "message": "item {itemUuid} not found"
                    },
                    "summary": "Item not found"
                  },
                  "vaultNotFound": {
                    "value": {
                      "status": 404,
                      "message": "vault {vaultUuid} not found"
                    },
                    "summary": "Vault not found"
                  }
                }
              }
            },
            "description": "File not found"
          },
          "413": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "fileTooLarge": {
                    "value": {
                      "status": 413,
                      "message": "File is too large to inline in request. Use the /v1/vaults/{vaultUUID}/items/{itemUUID}/files/{fileUUID}/content endpoint instead."
                    },
                    "summary": "File too large"
                  }
                }
              }
            },
            "description": "File content too large to display"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "vaultUuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The UUID of the Vault to fetch Item from"
          },
          {
            "in": "path",
            "name": "itemUuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The UUID of the Item to fetch File from"
          },
          {
            "in": "path",
            "name": "fileUuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The UUID of the File to fetch"
          },
          {
            "in": "query",
            "name": "inline_files",
            "schema": {
              "type": "boolean",
              "example": true
            },
            "description": "Tells server to return the base64-encoded file contents in the response."
          }
        ],
        "operationId": "GetDetailsOfFileById"
      }
    },
    "1password-connect/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get the content of a File",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "headers": {
              "Content-Length": {
                "schema": {
                  "type": "string",
                  "example": "6432"
                }
              },
              "Content-Disposition": {
                "schema": {
                  "type": "string",
                  "example": "attachment; filename=\"privkey.pem\""
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": 401,
                  "message": "Invalid token signature"
                }
              }
            },
            "description": "Invalid or missing token"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "fileNotFound": {
                    "value": {
                      "status": 404,
                      "message": "file {fileUuid} not found"
                    },
                    "summary": "File not found"
                  },
                  "itemNotFound": {
                    "value": {
                      "status": 404,
                      "message": "item {itemUuid} not found"
                    },
                    "summary": "Item not found"
                  },
                  "vaultNotFound": {
                    "value": {
                      "status": 404,
                      "message": "vault {vaultUuid} not found"
                    },
                    "summary": "Vault not found"
                  }
                }
              }
            },
            "description": "File not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "vaultUuid",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of vaultUuid to return"
          }
        ],
        "operationId": "DownloadFileByID"
      }
    }
  },
  "openapi": "3.0.2",
  "servers": [
    {
      "url": "/",
      "description": "Main (production) server"
    },
    {
      "url": "/",
      "description": "Internal test server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "schemas": {
      "File": {
        "type": "object",
        "example": {
          "id": "6r65pjq33banznomn7q22sj44e",
          "name": "foo.txt",
          "size": 35,
          "content": "VGhlIGZ1dHVyZSBiZWxvbmdzIHRvIHRoZSBjdXJpb3VzLgo=",
          "content_path": "v1/vaults/ionaiwtdvgclrixbt6ztpqcxnq/items/p7eflcy7f5mk7vg6zrzf5rjjyu/files/6r65pjq33banznomn7q22sj44e/content"
        },
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the file"
          },
          "name": {
            "type": "string",
            "description": "Name of the file"
          },
          "size": {
            "type": "integer",
            "description": "Size in bytes of the file"
          },
          "content": {
            "type": "string",
            "format": "byte",
            "description": "Base64-encoded contents of the file. Only set if size <= OP_MAX_INLINE_FILE_SIZE_KB kb and `inline_files` is set to `true`."
          },
          "section": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "description": "For files that are in a section, this field describes the section."
          },
          "content_path": {
            "type": "string",
            "readOnly": true,
            "description": "Path of the Connect API that can be used to download the contents of this file."
          }
        }
      },
      "Item": {
        "type": "object",
        "required": [
          "vault",
          "category"
        ],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[\\da-z]{26}$"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "urls": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "href"
              ],
              "properties": {
                "href": {
                  "type": "string",
                  "format": "url"
                },
                "label": {
                  "type": "string"
                },
                "primary": {
                  "type": "boolean"
                }
              }
            },
            "example": [
              {
                "href": "https://example.com",
                "primary": true
              },
              {
                "href": "https://example.org"
              }
            ]
          },
          "state": {
            "enum": [
              "ARCHIVED",
              "DELETED"
            ],
            "type": "string",
            "readOnly": true
          },
          "title": {
            "type": "string"
          },
          "vault": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^[\\da-z]{26}$"
              }
            }
          },
          "version": {
            "type": "integer"
          },
          "category": {
            "enum": [
              "LOGIN",
              "PASSWORD",
              "API_CREDENTIAL",
              "SERVER",
              "DATABASE",
              "CREDIT_CARD",
              "MEMBERSHIP",
              "PASSPORT",
              "SOFTWARE_LICENSE",
              "OUTDOOR_LICENSE",
              "SECURE_NOTE",
              "WIRELESS_ROUTER",
              "BANK_ACCOUNT",
              "DRIVER_LICENSE",
              "IDENTITY",
              "REWARD_PROGRAM",
              "DOCUMENT",
              "EMAIL_ACCOUNT",
              "SOCIAL_SECURITY_NUMBER",
              "MEDICAL_RECORD",
              "SSH_KEY",
              "CUSTOM"
            ],
            "type": "string"
          },
          "favorite": {
            "type": "boolean",
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "lastEditedBy": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Field": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "STRING",
              "EMAIL",
              "CONCEALED",
              "URL",
              "TOTP",
              "DATE",
              "MONTH_YEAR",
              "MENU"
            ],
            "type": "string",
            "default": "STRING"
          },
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "recipe": {
            "$ref": "#/components/schemas/GeneratorRecipe"
          },
          "entropy": {
            "type": "number",
            "readOnly": true,
            "description": "For fields with a purpose of `PASSWORD` this is the entropy of the value"
          },
          "purpose": {
            "enum": [
              "",
              "USERNAME",
              "PASSWORD",
              "NOTES"
            ],
            "type": "string",
            "description": "Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types."
          },
          "section": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          },
          "generate": {
            "type": "boolean",
            "default": false,
            "description": "If value is not present then a new value should be generated for this field"
          }
        }
      },
      "Patch": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "op",
            "path"
          ],
          "properties": {
            "op": {
              "enum": [
                "add",
                "remove",
                "replace"
              ],
              "type": "string"
            },
            "path": {
              "type": "string",
              "example": "/fields/06gnn2b95example10q91512p5/label",
              "description": "An RFC6901 JSON Pointer pointing to the Item document, an Item Attribute, and Item Field by Field ID, or an Item Field Attribute"
            },
            "value": {
              "type": "object"
            }
          }
        }
      },
      "Vault": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[\\da-z]{26}$"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "enum": [
              "USER_CREATED",
              "PERSONAL",
              "EVERYONE",
              "TRANSFER"
            ],
            "type": "string"
          },
          "items": {
            "type": "integer",
            "description": "Number of active items in the vault"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string"
          },
          "contentVersion": {
            "type": "integer",
            "description": "The version of the vault contents"
          },
          "attributeVersion": {
            "type": "integer",
            "description": "The vault version"
          }
        }
      },
      "FullItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Item"
          },
          {
            "type": "object",
            "properties": {
              "files": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/File"
                }
              },
              "fields": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Field"
                }
              },
              "sections": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "APIRequest": {
        "type": "object",
        "properties": {
          "actor": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "jti": {
                "type": "string"
              },
              "account": {
                "type": "string"
              },
              "requestIp": {
                "type": "string"
              },
              "userAgent": {
                "type": "string"
              }
            }
          },
          "action": {
            "enum": [
              "READ",
              "CREATE",
              "UPDATE",
              "DELETE"
            ],
            "type": "string"
          },
          "result": {
            "enum": [
              "SUCCESS",
              "DENY"
            ],
            "type": "string"
          },
          "resource": {
            "type": "object",
            "properties": {
              "item": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "pattern": "^[\\da-z]{26}$"
                  }
                }
              },
              "type": {
                "enum": [
                  "ITEM",
                  "VAULT"
                ],
                "type": "string"
              },
              "vault": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "pattern": "^[\\da-z]{26}$"
                  }
                }
              },
              "itemVersion": {
                "type": "integer"
              }
            }
          },
          "requestId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique id used to identify a single request."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The time at which the request was processed by the server."
          }
        },
        "description": "Represents a request that was made to the API. Including what Token was used and what resource was accessed."
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "HTTP Status Code"
          },
          "message": {
            "type": "string",
            "description": "A message detailing the error"
          }
        }
      },
      "GeneratorRecipe": {
        "type": "object",
        "properties": {
          "length": {
            "type": "integer",
            "default": 32,
            "maximum": 64,
            "minimum": 1,
            "description": "Length of the generated value"
          },
          "characterSets": {
            "type": "array",
            "items": {
              "enum": [
                "LETTERS",
                "DIGITS",
                "SYMBOLS"
              ],
              "type": "string"
            },
            "maximum": 3,
            "minimum": 0,
            "uniqueItems": true
          },
          "excludeCharacters": {
            "type": "string",
            "example": "abc1",
            "description": "List of all characters that should be excluded from generated passwords."
          }
        },
        "description": "The recipe is used in conjunction with the \"generate\" property to set the character set used to generate a new secure value"
      },
      "ServiceDependency": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "message": {
            "type": "string",
            "description": "Human-readable message for explaining the current state."
          },
          "service": {
            "type": "string"
          }
        },
        "description": "The state of a registered server dependency."
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}